local clusterext = require "clusterext"
local skynet = require "skynet"
require "skynet.manager"

local cluster_service = {}

local service_list = {}

local service_pairs = {
    loginservice = {"login", "loginservice"},
    worldservice = {"world", "worldservice"},
}

setmetatable(service_list, { __index = function(t, k)
    local cfg = service_pairs[k]
    if cfg then
        local temp = clusterext.queryservice(cfg[1], cfg[2])
        assert(temp, "unkown cluster service " .. tostring(cfg))
        t[k] = temp
        return t[k]
    elseif type(k) == "table" then
        local temp = clusterext.queryservice(k[1], k[2])
        assert(temp, "unkown cluster service " .. tostring(k))
        return temp
    else--本地唯一服务器
        local temp = clusterext.queryservice(nil, k)
        assert(temp, "unkown cluster service " .. k)
        t[k]= temp
        return temp
    end
end })

function get_cluster_service()
    return service_list
end

local remote_list = {}
function get_remote_service(node)
    local list = remote_list[node]
    if not list then
        list = {}
        remote_list[node] = list

        setmetatable(list, { __index = function(t, k)
            local tempnode = node or clusterext.self()
            local temp = clusterext.queryservice(tempnode, k)
            assert(temp, string.format("unkown remote service %s %s ", tempnode, k))
            t[k] = temp
            return t[k]
        end })
    end
    return list
end

--创建支持远端服务
function clusterservice(name, ...)
    local addr = skynet.newservice(name, ...)
    skynet.name("." .. name, addr)
    return addr
end

function registercluster(name, addr)
    skynet.name("." .. name, addr)
    return addr
end