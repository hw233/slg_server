local skynet = require "skynet"
local sharedata = require "sharedata"
local httprequest = require "httprequest"

--加载静态配置
local function load_static_config(load_func)
    local name = "./server/common/static_loader.lua"
    local file = io.open(name, "rb")
    local source = file:read "*a"
    file:close()

    local f, err = load(source, "load_static_config", "t")
    if not f then
        if LOG_ERROR then
            LOG_ERROR("load_static_config error: error \n " .. err)
        end
    end

    local temp = f()()
    for k,v in pairs(temp) do
        load_func(k, v)
    end
end

--加载服务器配置
local function load_server_config(load_func)
    local str = httprequest.req_server_cfg()
    if not str then
        return
    end

    local cfg = table.decode(str)
    print(cfg)
    local gamecfg = cfg.game
    local worldcfg = cfg.world
    --数据库配置
    local dbconfig = {}
    dbconfig.player = gamecfg.dbc_player or worldcfg.dbc_player --玩家数据库
    dbconfig.gamelog = gamecfg.dbc_log
    dbconfig.global = gamecfg.dbc_global
    dbconfig.global.master = true
    dbconfig.world = worldcfg.dbc_world
    dbconfig.world.master = true

    --cluster配置
    local clusterlist = {}
    for k,v in pairs(cfg.gamelist) do
        clusterlist[k] = v.host
    end
    clusterlist[worldcfg.login.cluster_name] = worldcfg.login.cluster_host
    clusterlist[worldcfg.world.cluster_name] = worldcfg.world.cluster_host

    --服务器配置
    worldcfg.gmt = tonumber(worldcfg.gmt) or 0

    gamecfg.gate.maxclient = 4000
    gamecfg.status = tonumber(gamecfg.status)
    gamecfg.newtag = tonumber(gamecfg.newtag)
    gamecfg.serverid = tonumber(gamecfg.serverid)
    gamecfg.questionnaire = (tonumber(gamecfg.question) == 1)
    load_func("config", { 
        dbconfig = dbconfig, 
        game = gamecfg, 
        world = worldcfg, 
        cluster = clusterlist,
        gamelist = cfg.gamelist,
    })
end

local CMD = {}

function CMD.hotfix()
    load_static_config(sharedata.update)
    skynet.retpack(true)
end

function CMD.reload_server_static()
    load_server_config(sharedata.update)
    skynet.retpack(true)
end

skynet.start (function ()
    load_server_config(sharedata.new)
	load_static_config(sharedata.new)

    skynet.dispatch("lua", function(session, source, cmd, ...)
		local f = assert(CMD[cmd])
		f(...)
	end)
end)